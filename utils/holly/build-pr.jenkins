pipeline {
    agent none

    parameters {
        string(name: 'VERSION_SUFFIX', defaultValue: '<default>', description: 'Specify custom version suffix for the build (e.g. "-RC1+1010"). Set to "<default>" to use the default one. Leave empty to make a final-version build without any suffix.')
        string(name: 'VERSION_SUFFIX_SHORT', defaultValue: '<default>', description: 'Specify custom version suffix for the build (e.g. "-RC1"). Set to "<default>" to use the default one. Leave empty to make a final-version build without any suffix.')
    }

    options {
        copyArtifactPermission('/Prusa-Firmware-Buddy/*')
    }

    stages {
        stage('Check Formatting') {
            agent {
                dockerfile {
                    label 'docker'
                    filename 'utils/holly/Dockerfile'
                    additionalBuildArgs '-t prusa-firmware-buddy'
                }
            }
            when {
                expression { env.CHANGE_TARGET }
            }
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh """
                    ln -fs /work/.dependencies

                    export XDG_CACHE_HOME=\$PWD/.precommit
                    pre-commit install
                    pre-commit run \
                        --source remotes/origin/${env.CHANGE_TARGET} \
                        --origin HEAD \
                        --show-diff-on-failure \
                        --hook-stage manual
                    """
                }
            }
        }

        stage('Prepare Build Stages') {
            agent {
                dockerfile {
                    label 'docker'
                    filename 'utils/holly/Dockerfile'
                    additionalBuildArgs '-t prusa-firmware-buddy'
                }
            }
            steps {
                script {
                    // required configurations
                    def configurations = [
                        [preset: "mini", build_type: "release", bootloader: "yes"],
                        [preset: "mini", build_type: "release", bootloader: "no"],
                    ]

                    // prepare version suffix
                    def commit_nr = sh(script: 'git rev-list HEAD --count', returnStdout: true).trim()
                    def short_suffix
                    def full_suffix
                    if (env.CHANGE_ID) {
                        // This is a PR build
                        short_suffix = "-BETA+${commit_nr}"
                        full_suffix = "${short_suffix}.PR${env.CHANGE_ID}.B${env.BUILD_NUMBER}"
                    } else if (env.BRANCH_NAME.startsWith("RELEASE-")) {
                        // This is an RC build
                        short_suffix = "-RC+${commit_nr}"
                        full_suffix = "${short_suffix}.B${env.BUILD_NUMBER}"
                    } else {
                        // This is build of an ordinary branch (not a release branch)
                        short_suffix = "-BETA+${commit_nr}"
                        def branch_spec = env.BRANCH_NAME.replaceAll("_", "-")
                        full_suffix = "${short_suffix}.BRANCH-${branch_spec}.B${env.BUILD_NUMBER}"
                    }

                    if (params.VERSION_SUFFIX != '<default>') {
                        full_suffix = params.VERSION_SUFFIX
                    }
                    if (params.VERSION_SUFFIX_SHORT != '<default>') {
                        short_suffix = params.VERSION_SUFFIX_SHORT
                    }

                    // create the build stages
                    configurations.each { config ->
                        stage("Build - ${config.preset},${config.build_type},${config.bootloader}boot") {
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                sh """
                                    ln -fs /work/.dependencies
                                    python3 utils/build.py \
                                        --preset ${config.preset} \
                                        --build-type ${config.build_type} \
                                        --bootloader ${config.bootloader} \
                                        --generate-bbf \
                                        --generate-dfu \
                                        --no-store-output \
                                        --version-suffix=${full_suffix} \
                                        --version-suffix-short=${short_suffix} \
                                        -DCUSTOM_COMPILE_OPTIONS:STRING=-Werror
                                """
                            }
                        }
                    }
                    stash name: "artifacts", includes: "build/mini_release_noboot/*.bin,build/mini_release_noboot/*.bbf"
                }
            }
        }

        stage('Test') {
            agent {
                dockerfile {
                    label 'docker'
                    filename 'utils/holly/Dockerfile'
                    additionalBuildArgs '-t prusa-firmware-buddy'
                }
            }
            steps {
                sh """
                export PATH=/work/.dependencies/cmake-3.22.5/bin:/work/.dependencies/ninja-1.10.2:\$PATH
                mkdir -p build-test
                LD_LIBRARY_PATH=/usr/local/lib32 /work/.dependencies/cmake-3.22.5/bin/ctest --build-and-test . build-test \
                    -DCMAKE_MAKE_PROGRAM=/work/.dependencies/ninja-1.10.2/ninja \
                    --build-generator Ninja \
                    --build-target tests \
                    --test-command ctest
                """
            }
        }
        /*
        stage('IntegrationTests') {
            agent {
                dockerfile {
                    label 'docker'
                    filename 'utils/holly/IntegrationTestsDockerfile'
                    additionalBuildArgs '-t it-prusa-firmware-buddy'
                }
            }
            steps {
                unstash "artifacts"
                sh """
                python3 -m pip install -r tests/integration/requirements.txt
                python3 -m pytest tests/integration --firmware build/mini_release_noboot/firmware.bin --log-cli-level info --log-cli-format="%(asctime)s [%(levelname)8s] (%(filename)s:%(lineno)s) %(message)s" --log-cli-date-format="%Y-%m-%d %H:%M:%S"
                """
            }
        }*/
    }

    post {
        always {
            node('master') {
                // archive build products
                archiveArtifacts artifacts: 'build/products/*', fingerprint: true
                // archive test products
                archiveArtifacts artifacts: 'build-test/Testing/Temporary/LastTest.log'
                emailext(
                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                    body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'ContributorMetadataRecipientProvider'], [$class: 'CulpritsRecipientProvider']]
                )
            }
        }
        cleanup {
            node('master') {
                deleteDir()
            }
        }
    }
}
